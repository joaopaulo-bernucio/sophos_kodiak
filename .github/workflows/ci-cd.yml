name: Flutter CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  flutter-test:
    name: Flutter Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.1'
        channel: 'stable'

    - name: Get Flutter dependencies
      run: flutter pub get
      working-directory: ./mobile

    - name: Generate mocks
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
      working-directory: ./mobile

    - name: Analyze Flutter code
      run: flutter analyze
      working-directory: ./mobile

    - name: Run Flutter unit tests
      run: flutter test --coverage --test-randomize-ordering-seed random
      working-directory: ./mobile

    - name: Upload Flutter coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./mobile/coverage/lcov.info
        flags: flutter
        name: flutter-coverage

    - name: Run Flutter integration tests
      run: flutter test integration_test/
      working-directory: ./mobile

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13.3'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
      working-directory: ./backend

    - name: Download spaCy model
      run: python -m spacy download pt_core_news_sm
      working-directory: ./backend

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      working-directory: ./backend

    - name: Run backend tests
      run: pytest -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        FLASK_ENV: testing

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  build-and-deploy:
    name: Build and Deploy
    needs: [flutter-test, backend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.0'
        channel: 'stable'

    - name: Get Flutter dependencies
      run: flutter pub get
      working-directory: ./mobile

    - name: Build Flutter APK
      run: flutter build apk --release
      working-directory: ./mobile

    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: app-release.apk
        path: mobile/build/app/outputs/flutter-apk/app-release.apk

    - name: Setup Python for backend
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Create backend deployment package
      run: |
        pip install -r requirements.txt
        zip -r backend-deployment.zip . -x "tests/*" "*.pyc" "__pycache__/*"
      working-directory: ./backend

    - name: Upload backend artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-deployment.zip
        path: backend/backend-deployment.zip

  performance-test:
    name: Performance Tests
    needs: [flutter-test, backend-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install locust
      working-directory: ./backend

    - name: Run performance tests
      run: pytest tests/performance/ -v --benchmark-only
      working-directory: ./backend

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Python security scan with bandit
      run: |
        pip install bandit
        bandit -r backend/app/ -f json -o bandit-report.json || true
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          bandit-report.json
